{% extends 'base.html.twig' %}

{% block body %}
    <div class="container" x-data="team()">
        <div class="row">
            <div class="col-sm-12">
                <h3>Team</h3>
            </div>
        </div>
        <hr>
        <div class="row">
            <div class="col-sm-4">
                <h6><strong>Name:</strong> {{ team.name }}</h6>
            </div>
            <div class="col-sm-4">
                <h6 class="text-center"><strong>Country:</strong> {{ team.country }}</h6>
            </div>
            <div class="col-sm-4">
                <h6 class="float-end"><strong>Active players:</strong>&nbsp;<span x-text="countActivePlayers"></span>
                </h6>
            </div>
        </div>
        <hr>
        <div class="row">
            <div class="col-sm-6">
                <h5>Players</h5>
            </div>
            <div class="col-sm-6" x-show="showList">
                <div class="btn-group float-end" role="group" aria-label="Basic outlined example">
                    <button type="button" class="btn btn-outline-dark" @click="addPlayer()">
                        <i class="fa fa-plus"></i>
                        &nbsp;New player
                    </button>
                    <button type="button" class="btn btn-outline-dark">
                        <i class="fa fa-shopping-cart"></i>
                        &nbsp;Buy Player
                    </button>
                </div>
            </div>
        </div>
        <hr>
        <div class="row" x-show="showList">
            <div class="col-sm-12">
                <table class="table">
                    <thead>
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col">Surname</th>
                        <th scope="col">Value</th>
                        <th scope="col">Active bids</th>
                        <th scope="col" class="text-right" style="width: 10%">Action</th>
                    </tr>
                    </thead>
                    <tbody>
                    <template x-for="player in players">
                        <tr>
                            <td x-text="player.player.name"></td>
                            <td x-text="player.player.surname"></td>
                            <td x-text="player.amountValue"></td>
                            <td x-text="player.countActiveBid"></td>
                            <td class="text-right">
                                <div class="btn-group float-end" role="group" aria-label="Basic outlined example">
                                    <button type="button" class="btn btn-outline-primary" @click="editPlayer(player.id)">
                                        <i class="fa fa-pencil"></i>
                                    </button>
                                    <button type="button" class="btn btn-outline-danger" @click="removePlayer(player.id)">
                                        <i class="fa fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    </template>
                    <template x-if="players.length === 0">
                        <tr>
                            <td colspan="5">
                                <div class="alert alert-info text-center">
                                    There is no players in this team please add new :)
                                </div>
                            </td>
                        </tr>
                    </template>
                    </tbody>

                </table>
            </div>
        </div>
        <div class="row" x-show="showForm">
            <form @submit.prevent="submitForm()">
                <div class="mb-3">
                    <input type="text" placeholder="Name" class="form-control" :class="formError.name.length > 0 ? 'is-invalid' : ''" x-model="formData.name">
                    <div class="invalid-feedback" x-text="formError.name.join()"></div>
                </div>
                <span class=""></span>
                <div class="mb-3">
                    <input type="text" placeholder="Surname" class="form-control" :class="formError.surname.length > 0 ? 'is-invalid' : ''" x-model="formData.surname">
                    <div class="invalid-feedback" x-text="formError.surname.join()"></div>
                </div>
                <div class="mb-3">
                    <input type="number" placeholder="Value" class="form-control" x-model="formData.value">
                </div>
                <div class="mb-3">
                    <input type="date" placeholder="Excepted end data" class="form-control" x-model="formData.expectedEndDate">
                </div>
                <div class="mb-3">
                    <div class="btn-group float-end" role="group" >
                        <button class="btn btn-xs btn-outline-danger" @click.prevent="closeForm()">
                            <i class="fa fa-close"></i>
                            &nbsp;Cancel
                        </button>
                        <button type="submit" class="btn btn-outline-success">
                            <i class="fa fa-check"></i>
                            &nbsp;Submit
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
    <script type="application/javascript">
        function team() {
            return {
                teamId: '{{ team.id }}',
                players: [],
                countActivePlayers: '{{ team.countActivePlayers }}',
                uri: '{{ path('api_team_read', {"id" : team.id}) }}/players',
                showList: true,
                showForm: false,
                editData: false,
                editPlayerId: null,
                actualPage: 1,
                formData: {
                    name: '',
                    surname: '',
                    value: '',
                    expectedEndDate: '',
                },

                formError: {
                    name: [],
                    surname: [],
                },

                closeForm() {
                    this.showList = true;
                    this.showForm = false;
                },

                initFormData(playerTeam = null) {
                    console.log(this.playerTeam);

                    this.formData.name = playerTeam ? playerTeam.player.name : '';
                    this.formData.surname = playerTeam ? playerTeam.player.surname : '';
                    this.formData.value = playerTeam ? playerTeam.amountValue : '';
                    this.formData.expectedEndDate = playerTeam && playerTeam.expectedEndDate ?
                        new Date(playerTeam.expectedEndDate).toISOString().substring(0, 10) : '';
                    this.formError = {
                        name: [],
                        surname: [],
                    };
                },

                async retrievePlayers(page = 1) {
                    const params = new URLSearchParams({
                        page: 1
                    });
                    let uri = this.uri + '?' + params.toString();
                    let response = await (await fetch(uri)).json();
                    this.players = response.results;
                    this.countActivePlayers = response.total;
                },

                init() {
                    this.retrievePlayers();
                },

                openForm() {
                    this.showList = false;
                    this.showForm = true;
                },

                addPlayer() {
                    this.openForm();
                    this.initFormData();
                    this.editPlayerId = null;
                },

                editPlayer(id) {
                    this.editPlayerId = id;
                    this.openForm();
                    let playerTeam = this.players.find(elt => elt.id === id);
                    this.initFormData(playerTeam);
                },

                submitForm() {
                    if (this.editPlayerId) {
                        this.updatePlayer();
                    } else {
                        this.createPlayer();
                    }
                },

                removePlayer() {

                },

                sellPlayer() {

                },

                async createPlayer() {
                    this.formData.expectedEndDate = this.formData.expectedEndDate === '' ?
                        null : this.formData.expectedEndDate;
                    this.formData.value = String(this.formData.value);
                    console.log(this.formData);
                    await fetch(this.uri, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            Accept: "application/json",
                        },
                        body: JSON.stringify(this.formData),
                    })
                        .then((response) => {
                            if (!response.ok) {
                                let err = new Error("HTTP status code: " + response.status)
                                err.response = response.json();
                                err.status = response.status
                                throw err
                            }
                            this.retrievePlayers();
                            this.closeForm();
                        }).catch((err) => {
                            err.response.then((data) => {
                                this.formError = data;
                            });
                        });
                },

                async updatePlayer() {
                    this.formData.expectedEndDate = this.formData.expectedEndDate === '' ?
                        null : this.formData.expectedEndDate;
                    this.formData.value = String(this.formData.value);
                    let uri = this.uri + '/' + this.editPlayerId;
                    await fetch(uri, {
                        method: "PUT",
                        headers: {
                            "Content-Type": "application/json",
                            Accept: "application/json",
                        },
                        body: JSON.stringify(this.formData),
                    })
                        .then(() => {
                            this.retrievePlayers();
                            this.closeForm();
                        });
                },
            }
        }
    </script>
{% endblock %}

{% block title %}

{% endblock %}

