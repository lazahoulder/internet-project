{% set active = 'team' %}

{% extends 'base.html.twig' %}

{% block title %}Team{% endblock %}

{% block body %}
    <div class="container" x-data="teams()" x-init="retrieveTeam()" style="padding-top: 20px">
        <div class="row">
            <div class="col-sm-9">
                <h3 x-text="headerTitle"></h3>
            </div>
            <div class="col-sm-3">
                <button x-show="showList" type="button" class="btn btn-sm btn-outline-dark float-end" @click="createTeamForm()">
                    <i class="fa fa-plus"></i>
                    &nbsp;New team
                </button>
            </div>
        </div>
        <div class="row" x-show="showList">
            <table class="table">
                <thead>
                <tr>
                    <th scope="col">Name</th>
                    <th scope="col" >Country</th>
                    <th scope="col" style="width: 20%">Acount balance</th>
                    <th scope="col" style="width: 20%">Active players</th>
                    <th scope="col" style="width: 25%"><span class="float-end">Action</span></th>
                </tr>
                </thead>
                <tbody>
                <template x-for="team in teams">
                    <tr>
                        <td x-text="team.name"></td>
                        <td x-text="team.country"></td>
                        <td x-text="team.acountBalance"></td>
                        <td x-text="team.countActivePlayers"></td>
                        <td>
                            <div class="hidden-sm hidden-xs btn-group float-end">
                                <a class="btn btn-sm btn-outline-primary" x-bind:href="baseUri + team.id">
                                    <i class="ace-icon fa fa-eye bigger-120"></i>
                                    &nbsp;Show
                                </a>
                                <button class="btn btn-sm btn-outline-secondary" @click="editTeam(team.id)">
                                    <i class="ace-icon fa fa-edit bigger-120"></i>
                                    &nbsp;Edit
                                </button>
                                <button class="btn btn-sm btn-outline-danger"
                                        @click="removeTeam(team.id)">
                                    <i class="ace-icon fa fa-close bigger-120"></i>
                                    &nbsp;Remove
                                </button>
                            </div>
                        </td>
                    </tr>
                </template>
                <template x-if="teams.length === 0">
                    <tr>
                        <td colspan="4">
                            <div class="alert alert-info">
                                There is no team in this time please add new :)
                            </div>
                        </td>
                    </tr>
                </template>
                </tbody>

            </table>
            <nav aria-label="Page navigation example" x-show="pages > 1">
                <ul class="pagination justify-content-center">
                    <li class="page-item" :class="{ 'disabled': actualPage === 1 }">
                        <a class="page-link" href="#" x-on:click.prevent="retrieveTeam(actualPage-1)" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                    <template x-for="pageNumber in pages" :key="pageNumber">
                            <li class="page-item" :class="{ 'active': actualPage === pageNumber }">
                                <a class="page-link" href="#" x-text="pageNumber" x-on:click.prevent="retrieveTeam(pageNumber)"></a>
                            </li>

                    </template>
                    <li class="page-item" :class="{ 'disabled': actualPage === pages }">
                        <a class="page-link" href="#" x-on:click.prevent="retrieveTeam(actualPage+1)" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                </ul>
            </nav>
        </div>
        <div class="row" x-show="showForm">
            <div class="col-sm-12">
                <form @submit.prevent="submitForm()">
                    <div class="mb-3">
                        <label for="nameInput" class="form-label">Name</label>
                        <input type="text" class="form-control" :class="formError.name !== '' ? 'is-invalid' : ''"
                               id="nameInput" x-model="formData.name">
                        <div class="invalid-feedback" x-text="formError.name"></div>
                    </div>
                    <div class="mb-3">
                        <label for="countryInput" class="form-label">Country</label>
                        <input type="text" class="form-control" id="countryInput"
                               :class="formError.country !== '' ? 'is-invalid' : ''" x-model="formData.country">
                        <div class="invalid-feedback" x-text="formError.country"></div>
                    </div>
                    <div class="mb-3">
                        <label for="balanceInput" class="form-label">Balance</label>
                        <input type="number" class="form-control" id="balanceInput"
                               :class="formError.acountBalance !== '' ? 'is-invalid' : ''"
                               x-model.number="formData.acountBalance">
                        <div class="invalid-feedback" x-text="formError.acountBalance"></div>
                    </div>
                    <div class="mb-3" x-show="!editData">
                        <hr>
                        <button class="btn btn-outline-primary" @click.prevent="addPlayer()">
                            <i class="fa fa-users"></i>
                            &nbsp;Add player
                        </button>
                    </div>
                    <div class="row" x-show="!editData">
                        <template x-for="(player, index) in formData.players" :key="index">
                            <div class="col-sm-3">
                                <div class="mb-3">
                                    <input type="text" placeholder="Name" class="form-control"
                                           :class="formError.players[index].name !== '' ? 'is-invalid' : ''"
                                           id="balanceInput"
                                           x-model="player.name">
                                    <div class="invalid-feedback" x-text="formError.players[index].name"></div>
                                </div>
                                <div class="mb-3">
                                    <input type="text" placeholder="Surname" class="form-control"
                                           :class="formError.players[index].surname !== '' ? 'is-invalid' : ''"
                                           id="balanceInput"
                                           x-model="player.surname">
                                    <div class="invalid-feedback" x-text="formError.players[index].surname"></div>
                                </div>
                                <div class="mb-3">
                                    <input type="number" placeholder="Value" class="form-control" id="balanceInput"
                                           x-model.number="player.value">
                                </div>
                                <div class="mb-3">
                                    <button class="btn btn-xs btn-outline-danger" @click.prevent="removePlayer(index)">
                                        <i class="fa fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </template>
                    </div>
                    <hr>
                    <div class="mb-3">
                        <div class="btn-group float-end" role="group">
                            <button class="btn btn-xs btn-outline-danger" @click.prevent="closeForm()">
                                <i class="fa fa-close"></i>
                                &nbsp;Cancel
                            </button>
                            <button type="submit" class="btn btn-outline-success">
                                <i class="fa fa-check"></i>
                                &nbsp;Submit
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <script type="application/javascript">
        function teams() {
            return {
                teams: [],
                actualPage: 1,
                pages: 0,
                showList: true,
                headerTitle: 'Teams',
                uri: '{{ path('api_team_list') }}',
                baseUri: '{{ path('app_team_index') }}',
                showForm: false,
                editData: false,
                editId: null,
                formData: {
                    name: "",
                    country: "",
                    acountBalance: 0,
                    players: [],
                },
                formError: {
                    name: "",
                    country: "",
                    acountBalance: "",
                    players: [],
                },

                formValid: false,

                showTeam(id) {
                    window.location.href = this.baseUri + id;
                },

                openForm(header = 'New team') {
                    this.showList = false;
                    this.showForm = true;
                    this.headerTitle = header;
                },

                createTeamForm() {
                    this.openForm();
                    this.initFormData();
                    this.editData = false;
                    console.log(!this.editData);
                },

                closeForm() {
                    this.showList = true;
                    this.showForm = false;
                    this.headerTitle = 'Teams';
                },

                initFormData(team = null) {
                    this.formData.name = team ? team.name : '';
                    this.formData.country = team ? team.country : '';
                    this.formData.acountBalance = team ? team.acountBalance : 0;
                    this.formData.players = [];

                    this.editData = false;
                },

                editTeam(teamId) {
                    this.openForm('Update Team');
                    let team = this.teams.find(elt => elt.id === teamId);
                    this.editId = teamId;
                    this.initFormData(team);
                    this.editData = true;
                    console.log(!this.editData);
                },

                addPlayer() {
                    this.formData.players.push({
                        name: '',
                        surname: '',
                        value: '',
                    });
                },

                removePlayer(index) {
                    this.formData.players.splice(index, 1);
                },

                async updateTeam() {
                    let uri = this.uri + this.editId;
                    await fetch(uri, {
                        method: "PUT",
                        headers: {
                            "Content-Type": "application/json",
                            Accept: "application/json",
                        },
                        body: JSON.stringify(this.formData),
                    }).then((response) => {
                        if (!response.ok) {
                            let err = new Error("HTTP status code: " + response.status)
                            err.response = response.json();
                            err.status = response.status
                            throw err
                        }

                        return response.json();
                    }).then((response) => {
                        this.showTeam(response.id);
                    }).catch((err) => {
                        console.log(err);
                        err.response.then((data) => {
                            this.formError = data;
                        });
                    });
                },

                submitForm() {
                    if (this.editData) {
                        this.updateTeam();
                    } else {
                        this.addTeam();
                    }
                },

                async retrieveTeam(page = this.actualPage) {
                    const params = new URLSearchParams({
                        page: page
                    });
                    let uri = this.uri + '?' + params.toString();
                    let response = await (await fetch(uri)).json();
                    this.teams = response.results;
                    this.actualPage = page;
                    this.pages = response.pageNumber;
                },

                async removeTeam(teamId) {
                    let uri = this.uri + teamId;

                    await fetch(uri, {
                        method: 'DELETE',
                    }).then(() => {
                        this.retrieveTeam();
                    });
                },

                async addTeam() {
                    await fetch(this.uri, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            Accept: "application/json",
                        },
                        body: JSON.stringify(this.formData),
                    }).then((response) => {
                        if (!response.ok) {
                            let err = new Error("HTTP status code: " + response.status)
                            err.response = response.json();
                            err.status = response.status
                            throw err
                        }

                        return response.json();
                    }).then((response) => {
                        this.showTeam(response.id);
                    }).catch((err) => {
                        console.log(err);
                        err.response.then((data) => {
                            this.formError = data;
                        });
                    });
                },
            }
        }
    </script>
{% endblock %}
