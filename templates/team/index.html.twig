{% extends 'base.html.twig' %}

{% block title %}Hello TeamController!{% endblock %}

{% block body %}
    <div class="container" x-data="testData()">
        <div class="row">
            <div class="col-sm-9">
                <h3 x-text="headerTitle"></h3>
            </div>
            <div class="col-sm-3">
                <button x-show="showList" type="button" class="btn btn-primary" @click="createTeam()">
                    <i class="fa fa-plus"></i>
                    &nbsp;New team
                </button>
            </div>
        </div>
        <div class="row" x-show="showList">
            <table class="table" >
                <thead>
                <tr>
                    <th scope="col">Name</th>
                    <th scope="col">Country</th>
                    <th scope="col">Acount balance</th>
                    <th scope="col">Action</th>
                </tr>
                </thead>
                <tbody>
                <template x-for="team in teams">
                    <tr>
                        <td x-text="team.name"></td>
                        <td x-text="team.country"></td>
                        <td x-text="team.acountBalance"></td>
                        <td class="text-right">
                            <div class="hidden-sm hidden-xs btn-group">
                                <button class="btn btn-xs btn-info">
                                    <i class="ace-icon fa fa-eye bigger-120"></i>
                                </button>
                                <button class="btn btn-xs btn-secondary" @click="editTeam(team.id)">
                                    <i class="ace-icon fa fa-edit bigger-120"></i>
                                </button>
                                <button class="btn btn-xs btn-danger"
                                        @click="removeTeam(team.id)">
                                    <i class="ace-icon fa fa-close bigger-120"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                </template>
                </tbody>
            </table>
        </div>
         <div class="row" x-show="showForm">
             <div class="col-sm-12">
                 <form @submit.prevent="submitForm()">
                     <div class="mb-3">
                         <label for="nameInput" class="form-label">Name</label>
                         <input type="text" class="form-control" id="nameInput" x-model="formData.name">
                     </div>
                     <div class="mb-3">
                         <label for="countryInput" class="form-label">Country</label>
                         <input type="text" class="form-control" id="countryInput" x-model="formData.country">
                     </div>
                     <div class="mb-3">
                         <label for="balanceInput" class="form-label">Balance</label>
                         <input type="text" class="form-control" id="balanceInput" x-model="formData.acountBalance">
                         <div x-show="isNaN(formData.acountBalance)" class="form-text text-danger">This value is not valid</div>
                     </div>
                     <button class="btn btn-primary" @click.prevent="toogleVue()">
                         <i class="fa fa-close"></i>
                         &nbsp;Cancel
                     </button>
                     <button type="submit" class="btn btn-primary">Submit</button>
                 </form>
             </div>
         </div>

    </div>
    <script type="application/javascript">
        function testData() {
            return {
                teams: [],
                showList: true,
                showForm: false,
                showDetail: false,
                editData: false,
                editId: null,
                headerTitle: 'Teams',
                formData: {
                    name: "",
                    country: "",
                    acountBalance: 0,
                },
                uri: '{{ path('api_team_list') }}',
                createUri: {{ path('api_team_create') }},

                async retrieveTeam(uri = this.uri) {
                    this.teams = await (await fetch(uri)).json()
                },

                toogleForm(title = 'Teams') {
                    this.showList = false;
                    this.showForm = true;
                    this.headerTitle = title;
                    this.initFormData();
                },

                toogleVue(title = 'Teams') {
                    this.showList = true;
                    this.showVue = false;
                    this.showForm = false;
                    this.headerTitle = title;
                },

                async removeTeam(teamId) {
                    let uri = this.uri + teamId;

                    await fetch(uri, {
                        method: 'DELETE',
                    }).then(() => {
                        this.retrieveTeam();
                    });
                },

                initFormData(team = null) {
                    if (team) {
                        this.formData.name = team.name;
                        this.formData.country = team.country;
                        this.formData.acountBalance = team.acountBalance;
                    } else {
                        this.formData = {
                            name: "",
                            country: "",
                            acountBalance: 0,
                        };
                    }

                    this.editData = false;
                },

                submitForm() {
                    if (this.editData) {
                        this.updateTeam().then(this.retrieveTeam());
                    } else {
                        this.addTeam().then(this.retrieveTeam());
                    }
                    this.toogleVue();
                    this.initFormData();
                },

                createTeam() {
                    this.toogleForm('New team');
                    this.editData = false;
                },

                editTeam(teamId) {
                    this.toogleForm('Edit team');
                    let team = this.teams.find(elt => elt.id == teamId);
                    this.editId = teamId;
                    this.initFormData(team);
                    console.log(team);
                    console.log(this.formData);
                    this.editData = true;
                },

                async addTeam() {
                    console.log(this.formData);
                    await fetch(this.createUri, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            Accept: "application/json",
                        },
                        body: JSON.stringify(this.formData),
                    })
                        .then(() => {
                            this.initFormData();
                        })
                        .catch(() => {
                            this.formMessage = "Something went wrong.";
                        });
                },

                async updateTeam() {
                    let uri = this.uri+this.editId;
                    await fetch(uri, {
                        method: "PUT",
                        headers: {
                            "Content-Type": "application/json",
                            Accept: "application/json",
                        },
                        body: JSON.stringify(this.formData),
                    })
                        .then(() => {
                            this.initFormData();
                        })
                        .catch(() => {
                            this.formMessage = "Something went wrong.";
                        });
                },

                init() {
                    this.toogleVue();
                    this.retrieveTeam();
                }
            }
        }
    </script>
{% endblock %}
